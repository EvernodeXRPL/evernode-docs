{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Evernode Evernode is a decentralized marketplace for hosting smart contracts. Evernode brings several decentralized technology innovations together to provide a global network of severs which is capable of hosting smart contracts. It consists of Hosts , which are Linux servers capable of hosting smart contracts; Registry , which maintains a directory of participating hosts; and Tenants who purchase server space from Hosts in order to run smart contracts. The interactions and the financial activities between these parties are facilitated by the XRP Ledger . Native currency Evernode uses Evers (EVR) as its native currency for all financial transactions in the marketplace. Evers are tokens issued on the XRP Ledger with a guaranteed finite supply. Hosts make their registration deposit in Evers and price their server space in Evers. Tenants can lease hosting using Evers. Initially, all Evers will be airdropped into the community to ensure a circulating supply of Evers for registration and hosting fees. The largest airdrop will go to the Evernode Foundation. The Evernode Foundation will use most of its Evers to purchase hosting services from registered hosts through the Anchor tenant procurement program to host the Community Contract . In this way, the Evernode Foundation acts as an \u201canchor tenant\u201d for the Evernode network, guaranteeing early adopters a steady income (in Evers) for making their server space available on Evernode. See Evers . Moment Tenants pay for hosting per \"Moment\". A moment is the shortest duration for which a smart contract instance can pay for hosting. Moments are calculated using \"XRPL ledgers elapsed\". Currently, a Moment is defined as 900 XRPL ledgers which is close to 1 hour in real world time. Further reading Evers Registry Hosts Tenants Anchor tenant procurement program Sashimono HotPocket Evernode news @EvernodeXRPL on Twitter Evernode website","title":"Evernode"},{"location":"#evernode","text":"Evernode is a decentralized marketplace for hosting smart contracts. Evernode brings several decentralized technology innovations together to provide a global network of severs which is capable of hosting smart contracts. It consists of Hosts , which are Linux servers capable of hosting smart contracts; Registry , which maintains a directory of participating hosts; and Tenants who purchase server space from Hosts in order to run smart contracts. The interactions and the financial activities between these parties are facilitated by the XRP Ledger .","title":"Evernode"},{"location":"#native-currency","text":"Evernode uses Evers (EVR) as its native currency for all financial transactions in the marketplace. Evers are tokens issued on the XRP Ledger with a guaranteed finite supply. Hosts make their registration deposit in Evers and price their server space in Evers. Tenants can lease hosting using Evers. Initially, all Evers will be airdropped into the community to ensure a circulating supply of Evers for registration and hosting fees. The largest airdrop will go to the Evernode Foundation. The Evernode Foundation will use most of its Evers to purchase hosting services from registered hosts through the Anchor tenant procurement program to host the Community Contract . In this way, the Evernode Foundation acts as an \u201canchor tenant\u201d for the Evernode network, guaranteeing early adopters a steady income (in Evers) for making their server space available on Evernode. See Evers .","title":"Native currency"},{"location":"#moment","text":"Tenants pay for hosting per \"Moment\". A moment is the shortest duration for which a smart contract instance can pay for hosting. Moments are calculated using \"XRPL ledgers elapsed\". Currently, a Moment is defined as 900 XRPL ledgers which is close to 1 hour in real world time.","title":"Moment"},{"location":"#further-reading","text":"Evers Registry Hosts Tenants Anchor tenant procurement program Sashimono HotPocket","title":"Further reading"},{"location":"#evernode-news","text":"@EvernodeXRPL on Twitter Evernode website","title":"Evernode news"},{"location":"anchor-tenant/","text":"Anchor tenant procurement program Not documented yet.","title":"Anchor tenant"},{"location":"anchor-tenant/#anchor-tenant-procurement-program","text":"Not documented yet.","title":"Anchor tenant procurement program"},{"location":"anchor-tenant/community-contract/","text":"Community contract Not documented yet.","title":"Community contract"},{"location":"anchor-tenant/community-contract/#community-contract","text":"Not documented yet.","title":"Community contract"},{"location":"evers/","text":"Evers Evernode uses Evers (EVR) as its native currency for all financial transactions in the marketplace. Evers are tokens issued on the XRP Ledger with a guaranteed finite supply. Minting Evers Evers are minted from a blackholed XRPL account known as Ever issuer which guarantees that no more Evers can be issued after the initial minting. At launch, all Evers will be issued to the Evernode Foundation. The number of Evers to be minted is still to be confirmed. Uses of Evers Hosts use Evers to pay for their registration on the network. Tenants use Evers to pay hosts for hosting services. Getting Evers There are three ways of getting Evers: Airdrops, Hosting Fees, & Market Purchases. 1. Airdrops Evernode Foundation plans to airdrop a portion (roughly 25%) of its Evers at launch to various ecosystem participants, including hosts and tenants who participate in the beta. The details of any such airdrop are not confirmed, but will be designed to ensure a sufficient supply of Evers for enthusiastic hosts and tenants to obtain the Evers they need to pay for registrations fees and hosting services. The Foundation reserves the right to, at any time and without notice, amend the details of any airdrop, include or exclude people or classes of people, or abandon the airdrop entirely (because, for example, the beta might fail and the network might never launch). You should participate in the beta because you want to help the Evernode Network succeed, not because you want an airdrop of Evers. 2. Earning Evers through Hosting Fees Hosts can earn Evers by providing hosting services . Initially, the Foundation will act as anchor tenant to provide a reliable Hosting fee market through its anchor tenant procurement program . Foundation as \"Anchor Tenant\" Evernode Foundation plans to use most of its Evers to fund its anchor tenant procurement program . Under this service, the Evernode Foundation plans to purchase hosting for one or more community contracts from registered hosts according to published procurement rules. Any registered host that wishes to be paid the nominated fee(s) \u2013 in Evers - to host the community contract(s) will be able to participate. In this way, the Evernode Foundation will act as an anchor tenant for the network, providing early-adopting hosts with an option for a reliable stream of Evers income. The Foundation will publish its community contract procurement rules in due course. Those rules are, of course, subject to change depending on whether the Foundation believes its role as anchor tenant is appropriately underpinning the stable growth of the network. 3. Market Purchases Since Evers are issued on the XRPL, anybody who wants to buy and/or sell Evers will be able to do so on the XRPL's native DEX. This is also the place where people can trade Hosting NFTs and Registration NFTs. While there is no reason why centralised exchanges might not list Evers, the Foundation has no plans to promote or secure the listing Evers on any exchange other than the XRPL's DEX.","title":"Evers"},{"location":"evers/#evers","text":"Evernode uses Evers (EVR) as its native currency for all financial transactions in the marketplace. Evers are tokens issued on the XRP Ledger with a guaranteed finite supply.","title":"Evers"},{"location":"evers/#minting-evers","text":"Evers are minted from a blackholed XRPL account known as Ever issuer which guarantees that no more Evers can be issued after the initial minting. At launch, all Evers will be issued to the Evernode Foundation. The number of Evers to be minted is still to be confirmed.","title":"Minting Evers"},{"location":"evers/#uses-of-evers","text":"Hosts use Evers to pay for their registration on the network. Tenants use Evers to pay hosts for hosting services.","title":"Uses of Evers"},{"location":"evers/#getting-evers","text":"There are three ways of getting Evers: Airdrops, Hosting Fees, & Market Purchases.","title":"Getting Evers"},{"location":"evers/#1-airdrops","text":"Evernode Foundation plans to airdrop a portion (roughly 25%) of its Evers at launch to various ecosystem participants, including hosts and tenants who participate in the beta. The details of any such airdrop are not confirmed, but will be designed to ensure a sufficient supply of Evers for enthusiastic hosts and tenants to obtain the Evers they need to pay for registrations fees and hosting services. The Foundation reserves the right to, at any time and without notice, amend the details of any airdrop, include or exclude people or classes of people, or abandon the airdrop entirely (because, for example, the beta might fail and the network might never launch). You should participate in the beta because you want to help the Evernode Network succeed, not because you want an airdrop of Evers.","title":"1. Airdrops"},{"location":"evers/#2-earning-evers-through-hosting-fees","text":"Hosts can earn Evers by providing hosting services . Initially, the Foundation will act as anchor tenant to provide a reliable Hosting fee market through its anchor tenant procurement program .","title":"2. Earning Evers through Hosting Fees"},{"location":"evers/#foundation-as-anchor-tenant","text":"Evernode Foundation plans to use most of its Evers to fund its anchor tenant procurement program . Under this service, the Evernode Foundation plans to purchase hosting for one or more community contracts from registered hosts according to published procurement rules. Any registered host that wishes to be paid the nominated fee(s) \u2013 in Evers - to host the community contract(s) will be able to participate. In this way, the Evernode Foundation will act as an anchor tenant for the network, providing early-adopting hosts with an option for a reliable stream of Evers income. The Foundation will publish its community contract procurement rules in due course. Those rules are, of course, subject to change depending on whether the Foundation believes its role as anchor tenant is appropriately underpinning the stable growth of the network.","title":"Foundation as \"Anchor Tenant\""},{"location":"evers/#3-market-purchases","text":"Since Evers are issued on the XRPL, anybody who wants to buy and/or sell Evers will be able to do so on the XRPL's native DEX. This is also the place where people can trade Hosting NFTs and Registration NFTs. While there is no reason why centralised exchanges might not list Evers, the Foundation has no plans to promote or secure the listing Evers on any exchange other than the XRPL's DEX.","title":"3. Market Purchases"},{"location":"hosts/","text":"Hosts An Evernode host is a Linux server registered on the Evernode Registry via an XRPL account owned and controlled by the host. The server runs a piece of Evernode software to open up the server hardware resources in a secure manner for Evernode Tenants to host their smart contracts. Registration The host registers on Evernode Registry by paying the current registration deposit with host metadata included in the payment transaction. Host metadata contains information such host server location and hardware resources. The XRPL account used to make the registration deposit is considered the Host account . This account's address identifies the host within Evernode. Once the registration deposit is paid, Evernode registry issues a Registration NFT to the host account. The Registration NFT acts as proof-of-membership of that host within Evernode and confirmation of its rights to run the Evernode software. The host can sell the NFT back to Evernode Registry for half of prevailing registration deposit at a later time. Upon this act, the registry will deregister the host from the membership registry. Hosting slots A host can choose what amount of its total hardware resources (CPU, RAM, Disk space) is allocated for Evernode smart contract hosting. This resource allocation is further divided into a number of equal-sized \"slots\" chosen by the host. These hosting slots correspond to potential smart contract instances tenants can purchase (1 slot = 1 instance). They are just a numerical division of the host's total allocated hardware resources and are only actually utilized when smart contract instances get materialized as a result of a tenant acquiring a lease. Each hosting slot is represented using a Hosting NFT which can be bought for Evers which signifies a lease acquisition. Hosting NFTs The host mints and offers hosting NFTs to represent all hosting slots on the host (N slots = N nfts). Hosting NFTs are always priced at the Lease amount in Evers, the price of hosting a smart contract for 1 Moment . A tenant must purchase a hosting NFTs in order to own a smart contract instance. Upon purchase, the tenant acquires a lease of a hosting slot for 1 Moment. The tenant can extend the lease by paying sufficient Evers to lease any number of future Moments in advance (lease amount = price of 1 Moment of hosting). Owning a hosting NFT means the right to own a smart contract instance for 1 Moment and the right to pay for future Moments of that instance. Smart contract instances When a tenant acquires a lease (purchases a hosting NFT), the host provisions a default contract instance in a hosting slot. The instance is assigned a unique instance name , which is derived from the purchased NFT itself. This can be used to identify a particular instance within the host. This, along with other instance details, such as communication port numbers and domain/ip addresses, are returned back to the tenant who acquired the lease. The lifetime of the contract instance is the lifetime of the lease. As long as the lease is being paid for, the contract instance will continue to function. Lease acquisition automatically guarantees a lifetime of 1 Moment. The lifetime can be extended by paying a corresponding amount of Evers as specified in lease amount (N x lease amount = N future Moments of lifetime). When the lease expires, the host deletes the instance and that hosting slots becomes available for a new lease again. At this point, the host burns the existing hosting NFT and re-issues a new NFT to replace it. Sashimono is the software which manages the contract instances on the host. It is capable of listening to hosting NFT purchases (lease acquisitions) from Evernode tenants on the host's XRPL account and appropriately provisioning contract instances. It uses Docker to isolate contract instances from each other. After the tenant receives the instance details, direct communication with the instance can be initiated without going through XRP Ledger or Sashimono. To learn more about communicating with a contract instance, see HotPocket Installation Evernode setup makes the entire process of registering and participating as an Evernode host a hassle free experience. With a guided set of steps, it can automatically register a Linux host on Evernode registry and serve lease acquisitions from tenants. It also installs the ncessary tools for the host administrator to manage the contract instances that have been provisioned on the host.","title":"Hosts"},{"location":"hosts/#hosts","text":"An Evernode host is a Linux server registered on the Evernode Registry via an XRPL account owned and controlled by the host. The server runs a piece of Evernode software to open up the server hardware resources in a secure manner for Evernode Tenants to host their smart contracts.","title":"Hosts"},{"location":"hosts/#registration","text":"The host registers on Evernode Registry by paying the current registration deposit with host metadata included in the payment transaction. Host metadata contains information such host server location and hardware resources. The XRPL account used to make the registration deposit is considered the Host account . This account's address identifies the host within Evernode. Once the registration deposit is paid, Evernode registry issues a Registration NFT to the host account. The Registration NFT acts as proof-of-membership of that host within Evernode and confirmation of its rights to run the Evernode software. The host can sell the NFT back to Evernode Registry for half of prevailing registration deposit at a later time. Upon this act, the registry will deregister the host from the membership registry.","title":"Registration"},{"location":"hosts/#hosting-slots","text":"A host can choose what amount of its total hardware resources (CPU, RAM, Disk space) is allocated for Evernode smart contract hosting. This resource allocation is further divided into a number of equal-sized \"slots\" chosen by the host. These hosting slots correspond to potential smart contract instances tenants can purchase (1 slot = 1 instance). They are just a numerical division of the host's total allocated hardware resources and are only actually utilized when smart contract instances get materialized as a result of a tenant acquiring a lease. Each hosting slot is represented using a Hosting NFT which can be bought for Evers which signifies a lease acquisition.","title":"Hosting slots"},{"location":"hosts/#hosting-nfts","text":"The host mints and offers hosting NFTs to represent all hosting slots on the host (N slots = N nfts). Hosting NFTs are always priced at the Lease amount in Evers, the price of hosting a smart contract for 1 Moment . A tenant must purchase a hosting NFTs in order to own a smart contract instance. Upon purchase, the tenant acquires a lease of a hosting slot for 1 Moment. The tenant can extend the lease by paying sufficient Evers to lease any number of future Moments in advance (lease amount = price of 1 Moment of hosting). Owning a hosting NFT means the right to own a smart contract instance for 1 Moment and the right to pay for future Moments of that instance.","title":"Hosting NFTs"},{"location":"hosts/#smart-contract-instances","text":"When a tenant acquires a lease (purchases a hosting NFT), the host provisions a default contract instance in a hosting slot. The instance is assigned a unique instance name , which is derived from the purchased NFT itself. This can be used to identify a particular instance within the host. This, along with other instance details, such as communication port numbers and domain/ip addresses, are returned back to the tenant who acquired the lease. The lifetime of the contract instance is the lifetime of the lease. As long as the lease is being paid for, the contract instance will continue to function. Lease acquisition automatically guarantees a lifetime of 1 Moment. The lifetime can be extended by paying a corresponding amount of Evers as specified in lease amount (N x lease amount = N future Moments of lifetime). When the lease expires, the host deletes the instance and that hosting slots becomes available for a new lease again. At this point, the host burns the existing hosting NFT and re-issues a new NFT to replace it. Sashimono is the software which manages the contract instances on the host. It is capable of listening to hosting NFT purchases (lease acquisitions) from Evernode tenants on the host's XRPL account and appropriately provisioning contract instances. It uses Docker to isolate contract instances from each other. After the tenant receives the instance details, direct communication with the instance can be initiated without going through XRP Ledger or Sashimono. To learn more about communicating with a contract instance, see HotPocket","title":"Smart contract instances"},{"location":"hosts/#installation","text":"Evernode setup makes the entire process of registering and participating as an Evernode host a hassle free experience. With a guided set of steps, it can automatically register a Linux host on Evernode registry and serve lease acquisitions from tenants. It also installs the ncessary tools for the host administrator to manage the contract instances that have been provisioned on the host.","title":"Installation"},{"location":"hosts/sashimono/","text":"Sashimono Sashimono is the software which runs on all Evernode hosts enabling them to participate in Evernode and provide smart contract hosting services to Evernode tenants. It is installed on a host via the Evernode setup . Sashimono performs several jobs: 1. Interact with the XRP Ledger on behalf of the host XRPL account. 2. Provision and manage smart contract instances as requested by tenants. 3. Perform routine tasks that are cruicial for the upkeep of your host on Evernode. XRPL integration Sashimono possesses access to the keys of the host's XRPL account which represents the host on Evernode registry. It uses the keys to interact with the XRP Ledger on behalf of the host account. It performs following activities on XRP Ledger. 1. Offers leases for contract instances by issuing hosting NFTs . 2. Serves lease acquisitions sent to the host account by Evernode tenants. 3. Ensure the current host status is reflected on the Evernode registry. Contract instance structure Sashimono provisions contract instances in response to leases acquired by tenants. Each leased instance consists of following components: HotPocket - Evernode's smart contract executation and consensus engine. hpws - WebSockets protocol software used by HotPocket. hpfs - Filesystem software based on FUSE used by HotPocket to maintain contract state and blockchain. Contract binaries - The smart contract application files provided by the tenant. Contract data - Persisted smart contract data (contract state) and blockchain data files. Different contract instances on the same host can be leased by different tenants. Hence, Sashimono ensures that the contract instances cannot interfere with each other or the host itself. For that, it uses Docker and Linux user account security to isolate contract instances from one another. Furthermore, it also makes sure that the smart contract itself cannot interfere with the infrastructure services within the instance such as HotPocket. The following diagram depicts how Sashimono structures the execution of different components of a contract instance. For each contract instance, Sashimono creates an unpriviledged Linux user and runs all the infrastructure components and custom contract binaries in the context of that tenant. This provides security isolation between components of different contract instances. Read more on Sashimono blog post","title":"Sashimono"},{"location":"hosts/sashimono/#sashimono","text":"Sashimono is the software which runs on all Evernode hosts enabling them to participate in Evernode and provide smart contract hosting services to Evernode tenants. It is installed on a host via the Evernode setup . Sashimono performs several jobs: 1. Interact with the XRP Ledger on behalf of the host XRPL account. 2. Provision and manage smart contract instances as requested by tenants. 3. Perform routine tasks that are cruicial for the upkeep of your host on Evernode.","title":"Sashimono"},{"location":"hosts/sashimono/#xrpl-integration","text":"Sashimono possesses access to the keys of the host's XRPL account which represents the host on Evernode registry. It uses the keys to interact with the XRP Ledger on behalf of the host account. It performs following activities on XRP Ledger. 1. Offers leases for contract instances by issuing hosting NFTs . 2. Serves lease acquisitions sent to the host account by Evernode tenants. 3. Ensure the current host status is reflected on the Evernode registry.","title":"XRPL integration"},{"location":"hosts/sashimono/#contract-instance-structure","text":"Sashimono provisions contract instances in response to leases acquired by tenants. Each leased instance consists of following components: HotPocket - Evernode's smart contract executation and consensus engine. hpws - WebSockets protocol software used by HotPocket. hpfs - Filesystem software based on FUSE used by HotPocket to maintain contract state and blockchain. Contract binaries - The smart contract application files provided by the tenant. Contract data - Persisted smart contract data (contract state) and blockchain data files. Different contract instances on the same host can be leased by different tenants. Hence, Sashimono ensures that the contract instances cannot interfere with each other or the host itself. For that, it uses Docker and Linux user account security to isolate contract instances from one another. Furthermore, it also makes sure that the smart contract itself cannot interfere with the infrastructure services within the instance such as HotPocket. The following diagram depicts how Sashimono structures the execution of different components of a contract instance. For each contract instance, Sashimono creates an unpriviledged Linux user and runs all the infrastructure components and custom contract binaries in the context of that tenant. This provides security isolation between components of different contract instances. Read more on Sashimono blog post","title":"Contract instance structure"},{"location":"hotpocket/","text":"HotPocket HotPocket is a smart contract execution and consensus engine. Your can build your \"Smart Contract\" and run it on a distributed HotPocket cluster. HotPocket takes care of running instances of your smart contract on all the nodes and perform \"consensus\" on your smart contract executions. Smart Contract HotPocket defines the smart contract as a regular POSIX application that can receive Inputs , produce Outputs and also persist State to permenant storage. You can use any POSIX-compliant programming platform to create HotPocket smart contracts (see nodejs contract example ). Consensus Because your smart contract instances simultaneously runs on multiple nodes, it needs to be verified that all instances execute under exact same conditions and in the same manner. HotPocket makes sure that the MAJORITY of the instances receives the same inputs , produces same outputs and persists same state to the permanent storage. This is known as consensus in which majority of instances AGREE upon similar behavior of the smart contract. Security aspect The benefit of consensus is that in order for an intruder to arbitrarily change the behavior of the smart contract or to forcefully tamper the persisted state, they need to be able to do that to a MAJORITY of the instances at the same time, which is practically impossible. If one of the instances gets compromised, the consensus would detect it and apply corrections to the compromised instance. Decentralized control If different instances of the smart contract is owned by multiple parties (eg. different people or organizations), then no single party has ultimate control over the entire cluster. No single party can manipulate the system. It would require collaboration of majority of owners to manipulate the entire system's behaviour in order to make collective modifications to the instances owned by them at the same time . Users You can \"connect\" to any ONE of the smart contract instances of the cluster and communicate with that instance as a \"user\" (HotPocket will subject your communication with that particular instance to inter-node consensus which is hidden from you). For HotPocket to distinguish you with other users who are connecting to the same cluster, you need to identify yourself with a unique Public/Private asymmetric key pair (generated using EdDSA signing key algorithm). Upon successful connection, you can communicate with the smart contract using the app-specific message formats defined by the smart contract developer. HotPocket acts as a \"carrier\" of messages between you and the smart contract. See User connection basics HotPocket SDKs HotPocket provides several libraries to make it easy to write HotPocket smart contracts and to connect and communicate with HotPocket smart contracts as a user. Library for NodeJs contracts Library for Javascript clients","title":"HotPocket"},{"location":"hotpocket/#hotpocket","text":"HotPocket is a smart contract execution and consensus engine. Your can build your \"Smart Contract\" and run it on a distributed HotPocket cluster. HotPocket takes care of running instances of your smart contract on all the nodes and perform \"consensus\" on your smart contract executions.","title":"HotPocket"},{"location":"hotpocket/#smart-contract","text":"HotPocket defines the smart contract as a regular POSIX application that can receive Inputs , produce Outputs and also persist State to permenant storage. You can use any POSIX-compliant programming platform to create HotPocket smart contracts (see nodejs contract example ).","title":"Smart Contract"},{"location":"hotpocket/#consensus","text":"Because your smart contract instances simultaneously runs on multiple nodes, it needs to be verified that all instances execute under exact same conditions and in the same manner. HotPocket makes sure that the MAJORITY of the instances receives the same inputs , produces same outputs and persists same state to the permanent storage. This is known as consensus in which majority of instances AGREE upon similar behavior of the smart contract.","title":"Consensus"},{"location":"hotpocket/#security-aspect","text":"The benefit of consensus is that in order for an intruder to arbitrarily change the behavior of the smart contract or to forcefully tamper the persisted state, they need to be able to do that to a MAJORITY of the instances at the same time, which is practically impossible. If one of the instances gets compromised, the consensus would detect it and apply corrections to the compromised instance.","title":"Security aspect"},{"location":"hotpocket/#decentralized-control","text":"If different instances of the smart contract is owned by multiple parties (eg. different people or organizations), then no single party has ultimate control over the entire cluster. No single party can manipulate the system. It would require collaboration of majority of owners to manipulate the entire system's behaviour in order to make collective modifications to the instances owned by them at the same time .","title":"Decentralized control"},{"location":"hotpocket/#users","text":"You can \"connect\" to any ONE of the smart contract instances of the cluster and communicate with that instance as a \"user\" (HotPocket will subject your communication with that particular instance to inter-node consensus which is hidden from you). For HotPocket to distinguish you with other users who are connecting to the same cluster, you need to identify yourself with a unique Public/Private asymmetric key pair (generated using EdDSA signing key algorithm). Upon successful connection, you can communicate with the smart contract using the app-specific message formats defined by the smart contract developer. HotPocket acts as a \"carrier\" of messages between you and the smart contract. See User connection basics","title":"Users"},{"location":"hotpocket/#hotpocket-sdks","text":"HotPocket provides several libraries to make it easy to write HotPocket smart contracts and to connect and communicate with HotPocket smart contracts as a user. Library for NodeJs contracts Library for Javascript clients","title":"HotPocket SDKs"},{"location":"hotpocket/user-connections/","text":"HotPocket user connection basics HotPocket smart contracts are run as a cluster of nodes. As a user, you can connect to any one of the nodes and communicate with the smart contract. User public/private key pair You need to posses a unique public/private assymetric key pair generated using EdDSA signing key algorithm. You can use a suitable cryptographic library available on your platform in order to generate a key pair. Client libraries provided by HotPocket also contains helper methods which can do this. It is the user's responsibility to not let the \"Private Key\" get compromised. If that happens, anyone possessing your Private Key can pretend to be you. On the flip side, if you lose your Private Key, you will be unable to reclaim your user identity on the HotPocket platform Making a connection In order to initiate a connection to a smart contract instance, you need to know the address and the port number of where that instances is hosted. See this Javascript example on how to connect and communicate with a smart contract instance. Submitting inputs HotPocket defines \"Inputs\" as the messages you (user) send to the smart contract which has the potential to modify the smart contract state (similar to HTTP PUT/POST methods). \"Inputs\" are subjected to \"consensus\" (see HotPocket basics) and therefore may take longer to be processed. The reason being, even though you submitted the \"Input\" to a specific HotPocket instance (denoted by host address and port), it will propagate this to other nodes. As a group, all the instances in the cluster makes sure \"majority\" of them got the input. Once the above condition (majority instances has received your input) is met, you will get a \"Accepted\" response. This indicates your \"Input\" got accepted for processing by the entire cluster. However, there are various reasons that your \"Input\" can be \"Rejected\" as well which will not be explained here. Note: Unlike HTTP Rest APIs, it is wrong to assume every 'input' message will get a 'output' message as the response. It is up to the smart contract to decide whether to send a response message or not. If the smart contract actually sends such a response back, it will arrive much later than the \"Accepted\" response you got upon input submission. This is very different from how HTTP APIs work where a 'request' will get a immediate 'response'. This is mainly due to HotPocket operating on top of Web Sockets as opposed to HTTP. Receiving outputs \"Outputs\" are messages sent by the smart contract to the user. \"Outputs\" might be sent as a response to previously submitted \"Inputs\" or they might be delivered without any relationship to a previous \"Input\" (eg. periodic notification messages sent by a smart contract). It is up to the smart contract to decide when and where to send outputs. If the smart contract message format specifies that a particular input message will get a response, then it is up to you to wait and grab that response when it arrives. HotPocket client library makes this easy (see Javascript example for output capture ). Read requests HotPocket \"Read requests\" are very similar to HTTP GET method. They represent any messages that request information from the smart contract and that DOES NOT modify the smart contract state (read only). They are NOT subjected to consensus and are very much faster in their response time as opposed to \"Inputs/Outputs\". Unlike \"Inputs/Outputs\", Read Requests also follow similar request/response pattern like HTTP. Those qualities make them the ideal mechanism to read information out of the smart contract. Binary vs Text Protocols HotPocket supports binary vs text-mode communication protocols. If the smart contract uses text-based (eg. json) messages, then you should use the HotPocket json protocol. Otherwise HotPocket supports bson protocol. You can specify this in HotPocket client library ( Javascript example )","title":"HotPocket user connection basics"},{"location":"hotpocket/user-connections/#hotpocket-user-connection-basics","text":"HotPocket smart contracts are run as a cluster of nodes. As a user, you can connect to any one of the nodes and communicate with the smart contract.","title":"HotPocket user connection basics"},{"location":"hotpocket/user-connections/#user-publicprivate-key-pair","text":"You need to posses a unique public/private assymetric key pair generated using EdDSA signing key algorithm. You can use a suitable cryptographic library available on your platform in order to generate a key pair. Client libraries provided by HotPocket also contains helper methods which can do this. It is the user's responsibility to not let the \"Private Key\" get compromised. If that happens, anyone possessing your Private Key can pretend to be you. On the flip side, if you lose your Private Key, you will be unable to reclaim your user identity on the HotPocket platform","title":"User public/private key pair"},{"location":"hotpocket/user-connections/#making-a-connection","text":"In order to initiate a connection to a smart contract instance, you need to know the address and the port number of where that instances is hosted. See this Javascript example on how to connect and communicate with a smart contract instance.","title":"Making a connection"},{"location":"hotpocket/user-connections/#submitting-inputs","text":"HotPocket defines \"Inputs\" as the messages you (user) send to the smart contract which has the potential to modify the smart contract state (similar to HTTP PUT/POST methods). \"Inputs\" are subjected to \"consensus\" (see HotPocket basics) and therefore may take longer to be processed. The reason being, even though you submitted the \"Input\" to a specific HotPocket instance (denoted by host address and port), it will propagate this to other nodes. As a group, all the instances in the cluster makes sure \"majority\" of them got the input. Once the above condition (majority instances has received your input) is met, you will get a \"Accepted\" response. This indicates your \"Input\" got accepted for processing by the entire cluster. However, there are various reasons that your \"Input\" can be \"Rejected\" as well which will not be explained here. Note: Unlike HTTP Rest APIs, it is wrong to assume every 'input' message will get a 'output' message as the response. It is up to the smart contract to decide whether to send a response message or not. If the smart contract actually sends such a response back, it will arrive much later than the \"Accepted\" response you got upon input submission. This is very different from how HTTP APIs work where a 'request' will get a immediate 'response'. This is mainly due to HotPocket operating on top of Web Sockets as opposed to HTTP.","title":"Submitting inputs"},{"location":"hotpocket/user-connections/#receiving-outputs","text":"\"Outputs\" are messages sent by the smart contract to the user. \"Outputs\" might be sent as a response to previously submitted \"Inputs\" or they might be delivered without any relationship to a previous \"Input\" (eg. periodic notification messages sent by a smart contract). It is up to the smart contract to decide when and where to send outputs. If the smart contract message format specifies that a particular input message will get a response, then it is up to you to wait and grab that response when it arrives. HotPocket client library makes this easy (see Javascript example for output capture ).","title":"Receiving outputs"},{"location":"hotpocket/user-connections/#read-requests","text":"HotPocket \"Read requests\" are very similar to HTTP GET method. They represent any messages that request information from the smart contract and that DOES NOT modify the smart contract state (read only). They are NOT subjected to consensus and are very much faster in their response time as opposed to \"Inputs/Outputs\". Unlike \"Inputs/Outputs\", Read Requests also follow similar request/response pattern like HTTP. Those qualities make them the ideal mechanism to read information out of the smart contract.","title":"Read requests"},{"location":"hotpocket/user-connections/#binary-vs-text-protocols","text":"HotPocket supports binary vs text-mode communication protocols. If the smart contract uses text-based (eg. json) messages, then you should use the HotPocket json protocol. Otherwise HotPocket supports bson protocol. You can specify this in HotPocket client library ( Javascript example )","title":"Binary vs Text Protocols"},{"location":"registry/","text":"Registry Evernode registry maintains the membership listing of all the hosts that have registered on Evernode. It is also the central place of truth about the Evernode network configuration parameters. The hosts interact with the well-known XRPL account denoted by Registry Address which is controlled by the Evernode registry service. Tenants can use the registry to find out latest details about member hosts. Registry service interprits the membership management requests arriving at the registry XRPL account while maintaining a database of indexed membership and network configuration data. Tenants can use indexed data to find out information about registered Evernode hosts. For any party who wishes to interact with Evernode, Registry Address is the entry point into the Evernode network. Network configuration Evernode registry keeps several global configuration parameters that applies to the entire Evernode network in an accessible manner. Here are some of the important ones: Ever issuer address Ever issuance limit Current registration deposit in Evers Moment duration Base market price of hosting leases Registry operations A new host requests for Evernode membership by initiating an XRPL payment of Evers equal to the current registration deposit. Upon successful processing, the registry service issues the Registration NFT to the host. The Registration NFT acts as proof-of-membership of that host within Evernode and confirms the host is legally licensed to run the Evernode software. The host can sell the NFT back to registry for half of prevailing registration deposit at a later time, or it can sell the NFT to another host. At this point, the registry service will deregister the host and clear the host data from the registry. Five (5) Evers of the registration deposit are non-refundable. The remaining deposit is refundable as the network grows. The registration deposit halves whenever the number hosts grows beyond certain milestones. When such \"halving\" happens, all existing members are rebated the excess Evers they have on deposit. In this way, all but 5 Evers of the registration deposit will ultimately be refunded to hosts, assuming the network grows to the relevant size. Future based on XRPL hooks In the future, when XRPL hooks amendment is finalized, it is anticipated that the Evernode registry service becomes a \"Hook\" on the XRP Ledger. WHen this happens, the host membership information can be read directly from the XRP Ledger by tenants.","title":"Registry"},{"location":"registry/#registry","text":"Evernode registry maintains the membership listing of all the hosts that have registered on Evernode. It is also the central place of truth about the Evernode network configuration parameters. The hosts interact with the well-known XRPL account denoted by Registry Address which is controlled by the Evernode registry service. Tenants can use the registry to find out latest details about member hosts. Registry service interprits the membership management requests arriving at the registry XRPL account while maintaining a database of indexed membership and network configuration data. Tenants can use indexed data to find out information about registered Evernode hosts. For any party who wishes to interact with Evernode, Registry Address is the entry point into the Evernode network.","title":"Registry"},{"location":"registry/#network-configuration","text":"Evernode registry keeps several global configuration parameters that applies to the entire Evernode network in an accessible manner. Here are some of the important ones: Ever issuer address Ever issuance limit Current registration deposit in Evers Moment duration Base market price of hosting leases","title":"Network configuration"},{"location":"registry/#registry-operations","text":"A new host requests for Evernode membership by initiating an XRPL payment of Evers equal to the current registration deposit. Upon successful processing, the registry service issues the Registration NFT to the host. The Registration NFT acts as proof-of-membership of that host within Evernode and confirms the host is legally licensed to run the Evernode software. The host can sell the NFT back to registry for half of prevailing registration deposit at a later time, or it can sell the NFT to another host. At this point, the registry service will deregister the host and clear the host data from the registry. Five (5) Evers of the registration deposit are non-refundable. The remaining deposit is refundable as the network grows. The registration deposit halves whenever the number hosts grows beyond certain milestones. When such \"halving\" happens, all existing members are rebated the excess Evers they have on deposit. In this way, all but 5 Evers of the registration deposit will ultimately be refunded to hosts, assuming the network grows to the relevant size.","title":"Registry operations"},{"location":"registry/#future-based-on-xrpl-hooks","text":"In the future, when XRPL hooks amendment is finalized, it is anticipated that the Evernode registry service becomes a \"Hook\" on the XRP Ledger. WHen this happens, the host membership information can be read directly from the XRP Ledger by tenants.","title":"Future based on XRPL hooks"},{"location":"tenants/","text":"Tenants An Evernode tenant is an entity which leases a hosting slot in order to host a smart contract instance in return for paying an agreed hosting fee in Evers for each moment of hosting. In the real world, tenants can be developers or applications that wants to create and maintain smart contract instances. Contract instances To launch an instance of a contract on a host, the tenant must first acquire a lease, represented by a Hosting NFT . The Hosting NFT represents a promise to provision a slot for an instance in return for an agreed fee \u2013 in Evers \u2013 per Moment of hosting. By owning the Hosting NFT the tenant gains access to a slot with a freshly-provisioned default HotPocket smart contract instance. The tenant then replaces the empty default contract with its own contract. The instance persists each Moment for so long as the tenant owns the Hosting NFT for that slot and pays the agreed fee in Evers for each Moment of hosting. Contract clusters Using the above flow, a tenant can create multiple contract instances and configure them to talk to each other. Such a group of instances form a contract cluster which can perform consensus and synchronize with each other.","title":"Tenants"},{"location":"tenants/#tenants","text":"An Evernode tenant is an entity which leases a hosting slot in order to host a smart contract instance in return for paying an agreed hosting fee in Evers for each moment of hosting. In the real world, tenants can be developers or applications that wants to create and maintain smart contract instances.","title":"Tenants"},{"location":"tenants/#contract-instances","text":"To launch an instance of a contract on a host, the tenant must first acquire a lease, represented by a Hosting NFT . The Hosting NFT represents a promise to provision a slot for an instance in return for an agreed fee \u2013 in Evers \u2013 per Moment of hosting. By owning the Hosting NFT the tenant gains access to a slot with a freshly-provisioned default HotPocket smart contract instance. The tenant then replaces the empty default contract with its own contract. The instance persists each Moment for so long as the tenant owns the Hosting NFT for that slot and pays the agreed fee in Evers for each Moment of hosting.","title":"Contract instances"},{"location":"tenants/#contract-clusters","text":"Using the above flow, a tenant can create multiple contract instances and configure them to talk to each other. Such a group of instances form a contract cluster which can perform consensus and synchronize with each other.","title":"Contract clusters"}]}